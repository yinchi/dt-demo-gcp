"""Add index to "username" field.

Revision ID: 25757de76e94
Revises: 8fa17962a03a
Create Date: 2025-08-14 05:06:12.212430

"""

from typing import Sequence, Union

from alembic import op

# from pydantic_settings import BaseSettings, SettingsConfigDict

# revision identifiers, used by Alembic.
revision: str = "25757de76e94"
down_revision: Union[str, Sequence[str], None] = "8fa17962a03a"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(op.f("user_username_key"), "user", type_="unique")
    op.create_index(op.f("ix_user_username"), "user", ["username"], unique=True)
    # ### end Alembic commands ###

    # If desired, add bulk inserts here; example as follows:
    # Insert the initial admin user, reading a PydanticSettings value
    # admin_password = bytes(Settings().admin_password, 'utf-8')
    # op.bulk_insert(
    #     user_table,
    #     [
    #         {
    #             'id': str(uuid.uuid4()),  # Generate a unique UUID
    #             'username': 'admin',
    #             'hashed_password': bcrypt.hashpw(admin_password, bcrypt.gensalt()),
    #         }
    #     ]
    # )


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_user_username"), table_name="user")
    op.create_unique_constraint(
        op.f("user_username_key"), "user", ["username"], postgresql_nulls_not_distinct=False
    )
    # ### end Alembic commands ###
