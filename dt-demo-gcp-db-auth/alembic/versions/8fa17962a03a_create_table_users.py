"""Create table "users".

Revision ID: 8fa17962a03a
Revises:
Create Date: 2025-08-13 07:41:12.003781

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# from pydantic_settings import BaseSettings, SettingsConfigDict

# revision identifiers, used by Alembic.
revision: str = "8fa17962a03a"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "user",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("username", sa.VARCHAR(), nullable=False),
        sa.Column("hashed_password", postgresql.BYTEA(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("username"),
    )
    # ### end Alembic commands ###

    # If desired, add bulk inserts here; example as follows:
    # Insert the initial admin user, reading a PydanticSettings value
    # admin_password = bytes(Settings().admin_password, 'utf-8')
    # op.bulk_insert(
    #     user_table,
    #     [
    #         {
    #             'id': str(uuid.uuid4()),  # Generate a unique UUID
    #             'username': 'admin',
    #             'hashed_password': bcrypt.hashpw(admin_password, bcrypt.gensalt()),
    #         }
    #     ]
    # )


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("user")
    # ### end Alembic commands ###
